{"config":{"indexing":"full","lang":["zh"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Legacy","title":"Legacy"},{"location":"#legacy","text":"","title":"Legacy"},{"location":"BI/","text":"BI","title":"BI"},{"location":"BI/#bi","text":"","title":"BI"},{"location":"DB2/","text":"DB2 DB2 Documentation Mybatis DB2 Usage Notes db2 jdbc code samples node.js CRUD with db2","title":"DB2"},{"location":"DB2/#db2","text":"DB2 Documentation Mybatis DB2 Usage Notes db2 jdbc code samples node.js CRUD with db2","title":"DB2"},{"location":"IBM-MQ/","text":"IBM-MQ","title":"IBM-MQ"},{"location":"IBM-MQ/#ibm-mq","text":"","title":"IBM-MQ"},{"location":"JAVA/","text":"JAVA Setup JDK Windows \u914d\u7f6e JDK \u53ef\u4ee5\u4f7f\u7528 PowerShell \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 winget search openjdk winget install AdoptOpenJDK.OpenJDK.8 \u5982\u679c\u9700\u8981\u5b89\u88c5\u591a\u4e2aJDK\u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 jvms IDE\u53ef\u4ee5\u9009\u62e9 Eclipse \u6216 VSCode Eclipse \u63d2\u4ef6 Eclipse EGit: Git Integration for Eclipse Eclipse Linux Tools Eclipse Maven Integration - m2eclipse VSCode winget search vscode winget install Microsoft.VisualStudioCode Plz refer to Java in Visual Studio Code Check VSCodium if you need a freely-licensed binary distribution winget search vscodium winget install VSCodium.VSCodium Web Backend Sample spring-petclinic quarkus-super-heroes Hello World public class App { public static void main(String[] args) throws Exception { System.out.println(\"Hello, World!\"); } } javac -d <classpath_dir> App.java java -classpath <classpath_dir> App Strings char char is a Java primitive data type. Primitive means that the variable holds the actual value, not a reference. Others: boolean, byte, short, int, long. float and double. char not Char The char data type can store: 1.Any letter, 2.Numbers between 0 to 65535 Inclusive, 3.16-bit Unicode characters including special characters. A value for char is enclosed in single quotes \" There is also an object wrapper called character for a char data type. Examples: char ch = 'j'; char uniChar = '\\0x004A'; // j in unicode char[] charArray = { '1', '2', '3', '4', '@'}; Methods: isLetter() isDigit() isWhitespace() isUpperCase() isLowerCase() toUpperCase() toLowerCase() toString() // returns a String object String String is a provided class in Java String not string String (and any other class) is a reference to an object A value for String is enclosed in double quotes \"\" String can also be stored in arrays, which are also objects String is made up of an array of chars Because strings are objects, they are immutable (cannot be changed once created) String Buffer & String Builder Classes provide mutable string functionality. Examples: String s = \"j\"; String[] strarray = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"}; Java 8+ methods char charAt(int index) int compareTo(String anotherString) String concat(String str) int hashCode() int indexOf int length() String replace and String replaceAll String[] split(String regex) boolean startsWith(String prefix) String substring(int beginIndex) String toLowerCase() String toUpperCase() String trim() String Arrays Every main method in Java has a string array declaration as part of it's standard formatting: public static void main(String[] args) { } String arrays can contain multiple string elements, also called tokens elements and tokens are referred to via their corresponding index number(int) Java array indexes start at 0 ArrayLists You need to know about java.util.ArrayList The size of an ArrayList can be modified, but the size of an array cannot. Elements can be added and removed from an ArrayList at any time Example ArrayList<String> flexibleList = new ArrayList<String>(); Formatting Strings char to String String.valueOf(char) To format char as a String, use the String.valueOf(char) method public static String charToString(char c) { return Character.toString(c); } String to char charAt(int) to format a character in a String as a char, use the charAt(int) method public static char StringToChar(String str) { return str.charAt(0); } String to char array toCharArray() Method creates an accessible char[] array Java stores strings as primitive char[] arrays internally but they are not accessible Useful when working with non delimited string. String str = \"onetwothreefourfive\"; char chararray[] = str.toCharArray(); getChars() Copy characters from a string or a part of a string into a char[] array Arguments are provided for string start, string end, array start, and Destination mystr.getChars(0, 16, chararr, 0); Streaming - chars() method Creates a Stream from a String object Use the mapToObj() and toArray() with chars() to convert a string to array of characters helpful when selecting characters in a string based on conditions of each character Character[] arraychars = str.chars().mapToObj(c -> (char) c).toArray(Character::new); String Array to String Arrays.toString() Simple way to convert an array to a string String str = Arrays.toString(strarray); StringBuilder() and append() Provides the option to conditionally add array elements to a string StringBuilder stringb = new StringBuilder(); for (int i = 0; i < strarray.length; ++i) { stringb.append(strarray[i] + ' '); } String Joiner Options for adding strings at the beginning and end of the constructed string Also defined characters to be used between array elements java.util.StringJoiner must be imported into your class StringJoiner stringj = new StringJoiner(\";;;\", \"[\", \"]\"); Stream and Collector Useful if you are provided with a string to consume Also can be used to produce an ArrayList java.util.stream.* and java.util.Arrays must be imported into your class return Stream.of(strarray).collect(Collectors.joining()); String to String Array split() method Splits a delimited string into string[] array using a specified character as a delimiter String[] strarray = str.split(\",\"); pattern.split() Splits a delimited string into string[] array using a specified pattern as a delimiter java.util.regex Pattern must be imported into your class String splitpattern = \"\\\\s\\\\s\"; // 2 spaces Pattern pattern = Pattern.compile(splitpattern); StringTokenizer Class Splits a string object into tokens Used to split a non-delimited string into an array Delimiters can be specified, default = space java.util.StringTokenizer must be import into your class import java.util.StringTokenizer; // ... StringTokenizer = tokenizer = new StringTokenizer(str); String[] strarray = new String[tokenizer.countTokens()]; // add tokens to an array int i = 0; while (tokenizer.hasMoreTokens()) { strarray[i] = tokenizer.nextToken(); ++i; } Numeric Records Conditional Logic switch(Java 7+) Multiple possible execution paths Chooses one possibility out of multiple options break statement is used to terminate statement flow default statement is optional Syntax: switch (expression) { case value1 : statements.. break; case value2 : statements.. default : statements.. } switch(Java 14+) Syntax switch (expression) { case value1 -> boolean; case values -> boolean; case value3 -> boolean; default :-> { statements.. } } Arrays Collections Maps HashMap \u975e\u7ebf\u7a0b\u5b89\u5168\uff0c\u53ef\u4f7f\u7528\u7ebf\u7a0b\u5b89\u5168\u7684 ConcurrentHashMap \u66ff\u4ee3\u3002 Loops Maven Classes and Packages Methods Modules Testing","title":"JAVA"},{"location":"JAVA/#java","text":"","title":"JAVA"},{"location":"JAVA/#setup","text":"","title":"Setup"},{"location":"JAVA/#jdk","text":"Windows \u914d\u7f6e JDK \u53ef\u4ee5\u4f7f\u7528 PowerShell \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u3002 winget search openjdk winget install AdoptOpenJDK.OpenJDK.8 \u5982\u679c\u9700\u8981\u5b89\u88c5\u591a\u4e2aJDK\u7248\u672c\uff0c\u53ef\u4ee5\u4f7f\u7528 jvms IDE\u53ef\u4ee5\u9009\u62e9 Eclipse \u6216 VSCode","title":"JDK"},{"location":"JAVA/#eclipse","text":"Eclipse EGit: Git Integration for Eclipse Eclipse Linux Tools Eclipse Maven Integration - m2eclipse","title":"Eclipse \u63d2\u4ef6"},{"location":"JAVA/#vscode","text":"winget search vscode winget install Microsoft.VisualStudioCode Plz refer to Java in Visual Studio Code Check VSCodium if you need a freely-licensed binary distribution winget search vscodium winget install VSCodium.VSCodium","title":"VSCode"},{"location":"JAVA/#web-backend-sample","text":"spring-petclinic quarkus-super-heroes","title":"Web Backend Sample"},{"location":"JAVA/#hello-world","text":"public class App { public static void main(String[] args) throws Exception { System.out.println(\"Hello, World!\"); } } javac -d <classpath_dir> App.java java -classpath <classpath_dir> App","title":"Hello World"},{"location":"JAVA/#strings","text":"","title":"Strings"},{"location":"JAVA/#char","text":"char is a Java primitive data type. Primitive means that the variable holds the actual value, not a reference. Others: boolean, byte, short, int, long. float and double. char not Char The char data type can store: 1.Any letter, 2.Numbers between 0 to 65535 Inclusive, 3.16-bit Unicode characters including special characters. A value for char is enclosed in single quotes \" There is also an object wrapper called character for a char data type. Examples: char ch = 'j'; char uniChar = '\\0x004A'; // j in unicode char[] charArray = { '1', '2', '3', '4', '@'}; Methods: isLetter() isDigit() isWhitespace() isUpperCase() isLowerCase() toUpperCase() toLowerCase() toString() // returns a String object","title":"char"},{"location":"JAVA/#string","text":"String is a provided class in Java String not string String (and any other class) is a reference to an object A value for String is enclosed in double quotes \"\" String can also be stored in arrays, which are also objects String is made up of an array of chars Because strings are objects, they are immutable (cannot be changed once created) String Buffer & String Builder Classes provide mutable string functionality. Examples: String s = \"j\"; String[] strarray = {\"One\", \"Two\", \"Three\", \"Four\", \"Five\"};","title":"String"},{"location":"JAVA/#java-8-methods","text":"char charAt(int index) int compareTo(String anotherString) String concat(String str) int hashCode() int indexOf int length() String replace and String replaceAll String[] split(String regex) boolean startsWith(String prefix) String substring(int beginIndex) String toLowerCase() String toUpperCase() String trim()","title":"Java 8+ methods"},{"location":"JAVA/#string-arrays","text":"Every main method in Java has a string array declaration as part of it's standard formatting: public static void main(String[] args) { } String arrays can contain multiple string elements, also called tokens elements and tokens are referred to via their corresponding index number(int) Java array indexes start at 0","title":"String Arrays"},{"location":"JAVA/#arraylists","text":"You need to know about java.util.ArrayList The size of an ArrayList can be modified, but the size of an array cannot. Elements can be added and removed from an ArrayList at any time Example ArrayList<String> flexibleList = new ArrayList<String>();","title":"ArrayLists"},{"location":"JAVA/#formatting-strings","text":"","title":"Formatting Strings"},{"location":"JAVA/#char-to-string","text":"","title":"char to String"},{"location":"JAVA/#stringvalueofchar","text":"To format char as a String, use the String.valueOf(char) method public static String charToString(char c) { return Character.toString(c); }","title":"String.valueOf(char)"},{"location":"JAVA/#string-to-char","text":"","title":"String to char"},{"location":"JAVA/#charatint","text":"to format a character in a String as a char, use the charAt(int) method public static char StringToChar(String str) { return str.charAt(0); }","title":"charAt(int)"},{"location":"JAVA/#string-to-char-array","text":"","title":"String to char array"},{"location":"JAVA/#tochararray-method","text":"creates an accessible char[] array Java stores strings as primitive char[] arrays internally but they are not accessible Useful when working with non delimited string. String str = \"onetwothreefourfive\"; char chararray[] = str.toCharArray();","title":"toCharArray() Method"},{"location":"JAVA/#getchars","text":"Copy characters from a string or a part of a string into a char[] array Arguments are provided for string start, string end, array start, and Destination mystr.getChars(0, 16, chararr, 0);","title":"getChars()"},{"location":"JAVA/#streaming-chars-method","text":"Creates a Stream from a String object Use the mapToObj() and toArray() with chars() to convert a string to array of characters helpful when selecting characters in a string based on conditions of each character Character[] arraychars = str.chars().mapToObj(c -> (char) c).toArray(Character::new);","title":"Streaming - chars() method"},{"location":"JAVA/#string-array-to-string","text":"","title":"String Array to String"},{"location":"JAVA/#arraystostring","text":"Simple way to convert an array to a string String str = Arrays.toString(strarray);","title":"Arrays.toString()"},{"location":"JAVA/#stringbuilder-and-append","text":"Provides the option to conditionally add array elements to a string StringBuilder stringb = new StringBuilder(); for (int i = 0; i < strarray.length; ++i) { stringb.append(strarray[i] + ' '); }","title":"StringBuilder() and append()"},{"location":"JAVA/#string-joiner","text":"Options for adding strings at the beginning and end of the constructed string Also defined characters to be used between array elements java.util.StringJoiner must be imported into your class StringJoiner stringj = new StringJoiner(\";;;\", \"[\", \"]\");","title":"String Joiner"},{"location":"JAVA/#stream-and-collector","text":"Useful if you are provided with a string to consume Also can be used to produce an ArrayList java.util.stream.* and java.util.Arrays must be imported into your class return Stream.of(strarray).collect(Collectors.joining());","title":"Stream and Collector"},{"location":"JAVA/#string-to-string-array","text":"","title":"String to String Array"},{"location":"JAVA/#split-method","text":"Splits a delimited string into string[] array using a specified character as a delimiter String[] strarray = str.split(\",\");","title":"split() method"},{"location":"JAVA/#patternsplit","text":"Splits a delimited string into string[] array using a specified pattern as a delimiter java.util.regex Pattern must be imported into your class String splitpattern = \"\\\\s\\\\s\"; // 2 spaces Pattern pattern = Pattern.compile(splitpattern);","title":"pattern.split()"},{"location":"JAVA/#stringtokenizer-class","text":"Splits a string object into tokens Used to split a non-delimited string into an array Delimiters can be specified, default = space java.util.StringTokenizer must be import into your class import java.util.StringTokenizer; // ... StringTokenizer = tokenizer = new StringTokenizer(str); String[] strarray = new String[tokenizer.countTokens()]; // add tokens to an array int i = 0; while (tokenizer.hasMoreTokens()) { strarray[i] = tokenizer.nextToken(); ++i; }","title":"StringTokenizer Class"},{"location":"JAVA/#numeric","text":"","title":"Numeric"},{"location":"JAVA/#records","text":"","title":"Records"},{"location":"JAVA/#conditional-logic","text":"","title":"Conditional Logic"},{"location":"JAVA/#switchjava-7","text":"Multiple possible execution paths Chooses one possibility out of multiple options break statement is used to terminate statement flow default statement is optional Syntax: switch (expression) { case value1 : statements.. break; case value2 : statements.. default : statements.. }","title":"switch(Java 7+)"},{"location":"JAVA/#switchjava-14","text":"Syntax switch (expression) { case value1 -> boolean; case values -> boolean; case value3 -> boolean; default :-> { statements.. } }","title":"switch(Java 14+)"},{"location":"JAVA/#arrays","text":"","title":"Arrays"},{"location":"JAVA/#collections","text":"","title":"Collections"},{"location":"JAVA/#maps","text":"HashMap \u975e\u7ebf\u7a0b\u5b89\u5168\uff0c\u53ef\u4f7f\u7528\u7ebf\u7a0b\u5b89\u5168\u7684 ConcurrentHashMap \u66ff\u4ee3\u3002","title":"Maps"},{"location":"JAVA/#loops","text":"","title":"Loops"},{"location":"JAVA/#maven","text":"","title":"Maven"},{"location":"JAVA/#classes-and-packages","text":"","title":"Classes and Packages"},{"location":"JAVA/#methods","text":"","title":"Methods"},{"location":"JAVA/#modules","text":"","title":"Modules"},{"location":"JAVA/#testing","text":"","title":"Testing"},{"location":"RPA/","text":"RPA","title":"RPA"},{"location":"RPA/#rpa","text":"","title":"RPA"},{"location":"RocketMQ/","text":"RocketMQ","title":"RocketMQ"},{"location":"RocketMQ/#rocketmq","text":"","title":"RocketMQ"}]}